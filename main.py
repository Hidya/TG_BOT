import os
import logging
import requests
from io import BytesIO
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import json

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration from environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN')
A4F_API_KEY = os.getenv('A4F_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# Flask app for webhook
app = Flask(__name__)

class A4FImageGenerator:
    def __init__(self):
        self.api_url = "https://api.a4f.co/v1/images/generations"
        self.headers = {
            "Authorization": f"Bearer {A4F_API_KEY}",
            "Content-Type": "application/json"
        }
    
    def generate_image(self, prompt):
        try:
            payload = {
                "model": "provider-3/FLUX.1-dev",
                "prompt": prompt,
                "num_outputs": 1,
                "aspect_ratio": "1:1",
                "output_format": "png",
                "output_quality": 80
            }
            
            response = requests.post(self.api_url, headers=self.headers, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('data') and len(result['data']) > 0:
                    image_url = result['data'][0]['url']
                    # Download image
                    img_response = requests.get(image_url)
                    if img_response.status_code == 200:
                        return img_response.content
                    else:
                        logger.error(f"Failed to download image: {img_response.status_code}")
                        return None
                else:
                    logger.error("No image data in response")
                    return None
            else:
                logger.error(f"A4F API Error: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            logger.error(f"Error generating image: {str(e)}")
            return None

# Initialize
image_gen = A4FImageGenerator()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üé® <b>AI Image Generator Bot</b>\n\n"
        "Mujhe koi description bhejo, main FLUX.1-dev model se image banaunga!\n\n"
        "<b>Examples:</b>\n"
        "‚Ä¢ A beautiful sunset over mountains\n"
        "‚Ä¢ A futuristic city at night\n"
        "‚Ä¢ A cute cat wearing sunglasses\n\n"
        "<b>Commands:</b>\n"
        "/start - Welcome message\n"
        "/help - Usage instructions"
    )
    await update.message.reply_text(welcome_text, parse_mode='HTML')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üîß <b>How to use:</b>\n\n"
        "1. Simply send me a text description\n"
        "2. Wait for the image to be generated\n"
        "3. Enjoy your AI-generated image!\n\n"
        "<b>Tips:</b>\n"
        "‚Ä¢ Be specific in your descriptions\n"
        "‚Ä¢ Mention style, colors, mood\n"
        "‚Ä¢ Keep it creative!\n\n"
        "<b>Model:</b> FLUX.1-dev by A4F.co"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def generate_image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_prompt = update.message.text
    user_name = update.effective_user.first_name
    
    # Send generating message
    msg = await update.message.reply_text("üé® Generating image... Please wait!")
    
    try:
        # Generate image
        image_data = image_gen.generate_image(user_prompt)
        
        if image_data:
            # Send image
            await update.message.reply_photo(
                photo=BytesIO(image_data),
                caption=f"üé® <b>Generated by FLUX.1-dev</b>\n\n<b>Prompt:</b> {user_prompt}\n<b>User:</b> {user_name}",
                parse_mode='HTML'
            )
            await msg.delete()
        else:
            await msg.edit_text("‚ùå Sorry! Could not generate image. Please try again later.")
            
    except Exception as e:
        logger.error(f"Error in generate_image_handler: {str(e)}")
        await msg.edit_text(f"‚ùå Error occurred: {str(e)}")

# Create application
application = Application.builder().token(BOT_TOKEN).build()

# Add handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image_handler))

# Webhook route
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        asyncio.run(application.process_update(update))
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

# Health check route
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy', 'bot': 'running'})

# Set webhook
@app.route('/set_webhook', methods=['POST'])
def set_webhook():
    try:
        bot = Bot(BOT_TOKEN)
        webhook_url = f"{WEBHOOK_URL}/webhook"
        result = bot.set_webhook(url=webhook_url)
        return jsonify({'status': 'success', 'webhook_set': result})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

if __name__ == "__main__":
    # For local testing
    if os.getenv('ENVIRONMENT') == 'local':
        print("Running bot in polling mode (local testing)...")
        application.run_polling()
    else:
        # For production (Back4app)
        print("Starting webhook server...")
        app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
